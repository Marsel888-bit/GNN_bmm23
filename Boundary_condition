import os
import os.path as osp
import json
import shutil
import pprint
import numpy as np
from matplotlib import pyplot as plt
%matplotlib inline
from scipy.integrate import quad
from scipy.interpolate import make_interp_spline
import pandas as pd
from scipy.interpolate import lagrange
from numpy.polynomial.polynomial import Polynomial
import warnings
warnings.filterwarnings("ignore")


def generate_points (n):
  x = np.linspace(-3, 3, n)
  y = np.random.uniform(0.25, 0.6, n)
  y[0] = 0.0
  y[-1] = 0.0
  return x, y

from google.colab import drive
drive.mount('drive')
from IPython.display import clear_output


def get_cross_section (n, num_of_iters, out_dir):

  os.makedirs(out_dir, exist_ok=True)
  df = pd.DataFrame()
  x, y = generate_points(n)
  x_y_spline = make_interp_spline(x, y)
  x = np.linspace(x.min(), x.max(), 100)
  df['x'] = x

  for i in range(1, num_of_iters):
    x_iter, y_iter = generate_points(n)
    x_y_spline = make_interp_spline(x_iter, y_iter)
    X_ = np.linspace(x_iter.min(), x_iter.max(), 100)
    Y_ = x_y_spline(X_)
    for j in range(1, len(Y_)-1):
      noise = np.random.normal(0, 0.01, 1)
      Y_[j] = Y_[j] + noise
    Y_ = np.array([elem * (2 / np.max(Y_)) for elem in list(Y_)])
    df[f'{i}'] = Y_
    plt.plot(X_, Y_)
    plt.title(f"Plot Smooth Curve of cross section number {i}")
    plt.xlabel("y")
    plt.ylabel("u")
    plt.show()
    plt.tight_layout()
    plt.savefig(os.path.join(out_dir, f'cross_section{i}.png'))
    display(plt.gcf())
    clear_output(wait=True)
  df.to_csv('data.csv', header=False, index=False)
  !cp data.csv "drive/My Drive/"
  return df, np.array(Y_)


out_dir = 'out'
df, y = get_cross_section(15, 100, out_dir)


def integrate_cos(x, k):
    return np.cos(np.pi * x * k / 6) * x1_y1_spline(x)

def integrate_sin(x, k):
    return np.sin(np.pi * x * k / 6) * x1_y1_spline(x)


def Fourier_construct (x, spline):

  k = np.arange(1, x.shape[0] + 1)
  print(k)
  a_0 = (1 / 3) * quad(spline, -3, 3)[0]
  a_k = (1 / 3) * np.array([quad(integrate_cos, -3, 3, args=(ki))[0] for ki in k])
  b_k = (1 / 3) * np.array([quad(integrate_sin, -3, 3, args=(ki))[0] for ki in k])
  res = list(np.concatenate([a_k, b_k], axis = 0))
  res.insert(0, a_0)
  return np.array([res])


x1, y1 = generate_points(15)
x1_y1_spline = make_interp_spline(x1, y1)
X_1 = np.linspace(x1.min(), x1.max(), 100)
Y_1 = x_y_spline(X_)
res1 = Fourier_construct(X_1, x1_y1_spline)
res1 = res1.reshape(201, 1)


def Fourier_series(x, res):

    values = []
    for i in range(len(x)):
      sum = res[0][0] / 2
      for j in range(201):
        if (j >= 1 and j <= 100):
          sum += np.sum(res[j] * np.cos(2 * np.pi * x[i] * j) / 6, axis=0)
        elif (j != 0 and j > 100):
          sum += np.sum(res[j] * np.sin(2 * np.pi * x[i] * j) / 6, axis=0)
      values.append(sum)
    return np.array(values).flatten()


def Lagrange_Polynom (coeff, x):
  value = 0
  for i in range(coeff.shape[0]):
    value += coeff[i] * x**i
  return value


def Lagrange_interpolation (n, num_of_iters, out_dir):

  os.makedirs(out_dir, exist_ok=True)
  df = pd.DataFrame()
  x, y = generate_points(n)
  polynome = lagrange(x, y)
  array = Polynomial(polynome.coef[::-1]).coef
  df['x'] = x
  list_of_coef = []

  for i in range(1, num_of_iters):
    x_iter, y_iter = generate_points(n)
    pol = lagrange(x_iter, y_iter)
    coef = Polynomial(pol.coef[::-1]).coef
    list_of_coef.append(coef)
    values = Lagrange_Polynom(coef, x_iter)
    df[f'{i}'] = values

    plt.scatter(x_iter, y_iter, label='data')
    plt.plot(x_iter, Polynomial(pol.coef[::-1])(x_iter), label='Polynomial')
    plt.plot(x_iter, values,
         label=r"Lagrange polynom", linestyle='-.')
    plt.legend()
    plt.show()
    plt.tight_layout()
    plt.savefig(os.path.join(out_dir, f'cross_section{i}.png'))
    display(plt.gcf())
    clear_output(wait=True)
  df.to_csv('data1.csv', header=False, index=False)
  !cp data.csv "drive/My Drive/"
  return df, list_of_coef


series = Fourier_series(X_1, res1)
x_values = X_1
y_interp = x1_y1_spline(X_1)
y_fourier = series


df1, coeff = Lagrange_interpolation(15, 100, out_dir)

plt.plot(x_values, y_interp, 'r', label='Интерполируемая функция')
plt.plot(x_values, y_fourier, 'b--', label='Интерполяция рядами Фурье')
plt.legend()
plt.xlabel('X')
plt.ylabel('Y')
plt.title('График интерполируемой функции и ряда Фурье')
plt.grid(True)
plt.show()
